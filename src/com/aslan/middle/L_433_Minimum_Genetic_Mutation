package com.aslan.middle;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;

/*
 * A gene string can be represented by an 8-character long string, with choices from "A", "C", "G", "T".

Suppose we need to investigate about a mutation (mutation from "start" to "end"), where ONE mutation is 
defined as ONE single character changed in the gene string.

For example, "AACCGGTT" -> "AACCGGTA" is 1 mutation.

Also, there is a given gene "bank", which records all the valid gene mutations. A gene must be 
in the bank to make it a valid gene string.

Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of 
mutations needed to mutate from "start" to "end". If there is no such a mutation, return -1.

Note:

Starting point is assumed to be valid, so it might not be included in the bank.
If multiple mutations are needed, all mutations during in the sequence must be valid.
You may assume start and end string is not the same.
Example 1:

start: "AACCGGTT"
end:   "AACCGGTA"
bank: ["AACCGGTA"]

return: 1
Example 2:

start: "AACCGGTT"
end:   "AAACGGTA"
bank: ["AACCGGTA", "AACCGCTA", "AAACGGTA"]

return: 2
Example 3:

start: "AAAAACCC"
end:   "AACCCCCC"
bank: ["AAAACCCC", "AAACCCCC", "AACCCCCC"]

return: 3


bfs!!!!
 * 
 * */
public class L_433_Minimum_Genetic_Mutation {
	public int minMutation(String start, String end, String[] bank) {
		if(start==null || end == null || start.length() != end.length()){
			return -1;
		}
		int res = 0;
		char[] mutation = new char[]{'A','C','G','T'};
		Set<String> bank_set = new HashSet<>() ;
		for(String s:bank){
			bank_set.add(s);
		}
		if(!bank_set.contains(end)){
			return -1;
		}
		if(bank_set.contains(start)){
			bank_set.remove(start);
		}
		Queue<String> queue = new LinkedList<>();
		queue.offer(start);
		while(!queue.isEmpty()){
			int size = queue.size();
			for(int i=0;i<size;i++){
				String cur_gene = queue.poll();
				for(int j=0;j<cur_gene.length();j++){
					for(char c : mutation){
						StringBuilder sb = new StringBuilder(cur_gene);
						sb.setCharAt(j, c);
						String sb_toString = sb.toString();
						if(sb_toString.equals(end)){
							return res+1;
						}
						if(bank_set.contains(sb_toString)){
							bank_set.remove(sb_toString);
							queue.offer(sb_toString);
						}
					}
				}
			}
			res++;
		}
		return -1;
	}
}
